name: Workflow

on: 
  push:
    branches: 
    - "develop"
    - "main"
    paths: # 特定のフォルダ内のファイルに変更があった場合のみデプロイ
      - '.github/workflows/backend_auto_deploy.yml'
      - 'backend/**'

# permissionsは、GitHub Actionsで利用するIAMロールに付与する権限を設定
permissions:
  id-token: write
  contents: read

env:
  ENV_VAR: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || '' }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  PROJECT: ${{ secrets.PROJECT }}
  AWS_REGION: ap-northeast-1

jobs:
  setup:
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || '' }}
    steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: env Confirmation
          run: |
            echo "ENV_VAR: ${{ env.ENV_VAR }}"
            echo "AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}"
            echo "PROJECT: ${{ env.PROJECT }}"
            echo "AWS_REGION: ${{ env.AWS_REGION }}"
 
  build:
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # setup-goは、Goのバージョンを指定してセットアップするアクション
      # goのバージョンを指定することで、ビルド時に指定したバージョンのGoを利用することができる
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
          cache-dependency-path: go.sum

      # setup-qemu-actionは、QEMUを利用してARM64のビルドを行うためのアクション
      # QEMUとは、異なるアーキテクチャのバイナリを実行するためのエミュレータ
      - name: Set up QEMU for arm64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # setup-buildx-actionを利用することで、Docker Buildxをセットアップすることができる
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # # /home/runner/go/pkg/mod: Go modulesのキャッシュを作成
      # - name: Create Go modules cache
      #   uses: actions/cache@v4
      #   with:
      #     path: /home/runner/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # # /home/runner/.cache/go-build: go-buildのキャッシュを作成
      # - name: Create go-build and cache
      #   uses: actions/cache@v4
      #   with:
      #     path: /home/runner/.cache/go-build
      #     key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # /tmp/.buildx-cache: Docker Buildxのキャッシュを作成
      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: backend/docker/${{ env.ENV_VAR }}/Dockerfile 
          platforms: linux/arm64
          tags: ${{ env.PROJECT }}_image:latest
          outputs: type=docker,dest=/tmp/${{ env.PROJECT }}_image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

  push:
    needs: build
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU for arm64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: $AWS_REGION
          role-to-assume: arn:aws:iam::$AWS_ACCOUNT_ID:role/${{ env.PROJECT }}-github-actions-role
          role-session-name: ${{ env.PROJECT }}-github-actions

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to ECR
        run: |
          docker load --input /tmp/${{ env.PROJECT }}_image.tar
          docker tag ${{ env.PROJECT }}_image:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.PROJECT }}-private-repository:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.PROJECT }}-private-repository:latest

  deploy:
    needs: push
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: $AWS_REGION
          role-to-assume: arn:aws:iam::$AWS_ACCOUNT_ID:role/${{ env.PROJECT }}-github-actions-role
          role-session-name: ${{ env.PROJECT }}-github-actions

      - name: Deploy to ECS
        run: |
          export ECS_CLUSTER="${{ env.PROJECT }}-ecs-cluster-$ENV_VAR"
          export ECS_SERVICE="${{ env.PROJECT }}-service-$ENV_VAR"
          echo "ECS_CLUSTER: $ECS_CLUSTER"
          echo "ECS_SERVICE: $ECS_SERVICE"
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
